@page "/realtime"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@rendermode RenderMode.InteractiveServer
@inject NavigationManager Navigation
@inject HubConnection _hubConnection

<h3>Realtime Data</h3>
@if (!string.IsNullOrEmpty(Message))
{
    <p>Received message: @Message</p>
}
else
{
<p>No real time data available :(</p>
}

@code {
    private string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _hubConnection.On<string>("ReceiveMessage", (data) =>
        {
            InvokeAsync(async () =>
            {
                try
                {
                    Message = data;
                    StateHasChanged(); 
                    Console.WriteLine("Message received and UI updated."); // Log success
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error updating UI: {ex.Message}"); // Log any errors
                }
            });
          
        });

        await _hubConnection.StartAsync();
    }

    // Ensure we stop the connection when the component is disposed
    public async ValueTask DisposeAsync()
    {
        if (_hubConnection.State != HubConnectionState.Disconnected)
        {
            await _hubConnection.StopAsync();
        }
    }
}